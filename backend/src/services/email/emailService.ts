import { ContributionData } from "../../types/contribution";
import { sendEmail } from "../../utils/sendEmail";

export class EmailService {
  constructor() {
    // Simple email service using utility function
  }

  async sendContributionEmail(
    contributionData: ContributionData
  ): Promise<boolean> {
    try {
      const emailContent = this.formatContributionData(contributionData);
      const adminEmail =
        process.env.ADMIN_EMAIL ||
        process.env.EMAIL_USER ||
        "hungnbc2@gmail.com";

      await sendEmail(
        [adminEmail],
        `[Ch√®o Ontology] ƒê√≥ng g√≥p m·ªõi: ${contributionData.playData.playName}`,
        emailContent
      );

      return true;
    } catch (error) {
      return false;
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      const testEmail = process.env.EMAIL_USER || "hungnbc2@gmail.com";
      await sendEmail(
        [testEmail],
        "Test Email Connection",
        "Email service connection test successful!"
      );
      return true;
    } catch (error) {
      return false;
    }
  }

  private formatContributionData(data: ContributionData): string {
    const { playData, characterData, actorData, contributorInfo } = data;

    let content = "üé≠ ƒê√ìNG G√ìP TH√îNG TIN CH√àO M·ªöI\n";
    content += "=".repeat(50) + "\n\n";

    // Contributor info
    if (
      contributorInfo &&
      (contributorInfo.name || contributorInfo.email || contributorInfo.note)
    ) {
      content += "üë§ TH√îNG TIN NG∆Ø·ªúI ƒê√ìNG G√ìP:\n";
      if (contributorInfo.name) content += `T√™n: ${contributorInfo.name}\n`;
      if (contributorInfo.email) content += `Email: ${contributorInfo.email}\n`;
      if (contributorInfo.note) content += `Ghi ch√∫: ${contributorInfo.note}\n`;
      content += "\n";
    }

    // Play info
    content += "üìö TH√îNG TIN V·ªû DI·ªÑN:\n";
    content += `T√™n v·ªü: ${playData.playName}\n`;
    content += `T√°c gi·∫£: ${playData.author}\n`;
    content += `S·ªë c·∫£nh: ${playData.sceneCount}\n`;
    content += `T√≥m t·∫Øt: ${playData.summary}\n\n`;

    // Scenes
    content += "üé¨ CHI TI·∫æT C√ÅC C·∫¢NH:\n";
    playData.scenes.forEach((scene, index) => {
      content += `\nC·∫£nh ${index + 1}: ${scene.name}\n`;
      content += `- T√≥m t·∫Øt: ${scene.summary}\n`;
      content += `- S·ªë video: ${scene.videoCount}\n`;
      const validLinks = scene.videoLinks.filter((link) => link.trim());
      if (validLinks.length > 0) {
        content += `- Video links:\n`;
        validLinks.forEach((link) => (content += `  + ${link}\n`));
      }
    });

    // Characters
    content += "\nüé≠ TH√îNG TIN NH√ÇN V·∫¨T:\n";
    characterData.characters.forEach((character, index) => {
      content += `\nNh√¢n v·∫≠t ${index + 1}: ${character.name}\n`;
      content += `- Lo·∫°i: ${character.type}\n`;
      content += `- Gi·ªõi t√≠nh: ${character.gender}\n`;
      content += `- M√¥ t·∫£: ${character.description}\n`;
    });

    // Actors
    content += "\nüé™ TH√îNG TIN DI·ªÑN VI√äN:\n";
    actorData.actors.forEach((actor, index) => {
      content += `\nDi·ªÖn vi√™n ${index + 1}: ${actor.name}\n`;
      content += `- Nh√¢n v·∫≠t th·ªß vai: ${actor.character}\n`;
      content += `- M√¥ t·∫£: ${actor.description}\n`;
    });

    content += "\n" + "=".repeat(50) + "\n";
    content += `Th·ªùi gian: ${new Date().toLocaleString("vi-VN")}\n`;
    content += "Email ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng Ch√®o Ontology\n";

    return content;
  }
}
