"use client";

import { useEffect, useState } from "react";
import { SearchFilters, SearchType } from "@/types";
import { getCharacters, getPlays } from "@/apis/infor";

interface SearchFormProps {
  onSearch: (filters: SearchFilters, searchType: SearchType) => void;
}

const SearchForm = ({ onSearch }: SearchFormProps) => {
  const [activeTab, setActiveTab] = useState<number>(1);
  const [filters, setFilters] = useState<SearchFilters>({
    characterName: "",
    quoteContent: "",
    performance: "",
    gender: undefined,
  });

  // Mock data options - s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng data th·∫≠t sau

  const [characters, setCharacters] = useState([]);
  const [plays, setPlays] = useState([]);
  const fetchCharacters = async () => {
    try {
      const response = await getCharacters();
      setCharacters(response.data);
    } catch (error) {
      console.error("Failed to fetch characters:", error);
    }
  };

  const fetchPlays = async () => {
    try {
      const response = await getPlays();
      setPlays(response.data);
    } catch (error) {
      console.error("Failed to fetch plays:", error);
    }
  };

  useEffect(() => {
    fetchCharacters();
    fetchPlays();
  }, []);

  const characterOptions = characters.map((character) => ({
    value: character,
    label: character,
  }));

  const playOptions = plays.map((play) => ({
    value: play,
    label: play,
  }));

  const actorOptions = [
    { value: "", label: "Ch·ªçn bi·ªÉu c·∫£m" },
    { value: "vui", label: "vui" },
    { value: "bu·ªìn", label: "bu·ªìn" },
    { value: "gi·∫≠n", label: "gi·∫≠n" },
    { value: "th∆∞∆°ng", label: "th∆∞∆°ng" },
    { value: "lo", label: "lo" },
  ];

  const categoryOptions = [
    { value: "", label: "Ch·ªçn danh m·ª•c" },
    { value: "nh√¢n v·∫≠t", label: "nh√¢n v·∫≠t" },
    { value: "tr√≠ch d·∫´n", label: "tr√≠ch d·∫´n" },
    { value: "v·ªü di·ªÖn", label: "v·ªü di·ªÖn" },
    { value: "di·ªÖn vi√™n", label: "di·ªÖn vi√™n" },
  ];

  const tabs = [
    { id: 3, label: "Xu·∫•t hi·ªán nh√¢n v·∫≠t", icon: "üé≠" },
    { id: 4, label: "N√©t di·ªÖn", icon: "üòä" },
    { id: 5, label: "Xem m√¥ t·∫£", icon: "üìñ" },
  ];

  const handleSearch = (
    tabId: number,
    customFilters?: Partial<SearchFilters>
  ) => {
    const searchFilters = { ...filters, ...customFilters };

    // X√°c ƒë·ªãnh lo·∫°i t√¨m ki·∫øm d·ª±a tr√™n tab
    let searchType: SearchType = "all";
    switch (tabId) {
      case 1:
      case 3:
      case 4:
        searchType = "characters";
        break;
      case 2:
        searchType = "quotes";
        break;
      case 5:
        searchType = "performances";
        break;
    }

    onSearch(searchFilters, searchType);
  };

  const handleFilterChange = (key: keyof SearchFilters, value: string) => {
    setFilters((prev) => ({
      ...prev,
      [key]: key === "gender" && value === "" ? undefined : value,
    }));
  };

  const resetFilters = () => {
    setFilters({
      characterName: "",
      quoteContent: "",
      performance: "",
      gender: undefined,
    });
  };

  return (
    <div className="bg-surface rounded-lg shadow-ancient p-8 border-2 border-accent max-w-6xl mx-auto">
      <div className="mb-8 text-center">
        <h2 className="text-3xl font-bold text-ancient-ink mb-2 font-traditional">
          T√¨m ki·∫øm th√¥ng tin Ch√®o
        </h2>
        <p className="text-gray-600">
          Ch·ªçn lo·∫°i t√¨m ki·∫øm v√† ƒëi·ªÅn th√¥ng tin c·∫ßn thi·∫øt
        </p>
      </div>

      {/* Tab Navigation */}
      <div className="flex flex-wrap justify-center gap-2 mb-8 border-b border-gray-200 pb-4">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => {
              setActiveTab(tab.id);
              resetFilters();
            }}
            className={`px-4 py-3 rounded-lg font-medium transition-all duration-300 flex items-center gap-2 ${
              activeTab === tab.id
                ? "bg-primary-500 text-white shadow-lg transform scale-105"
                : "bg-white text-ancient-ink border border-gray-300 hover:border-primary-400 hover:bg-primary-50"
            }`}
          >
            <span className="text-lg">{tab.icon}</span>
            <span className="text-sm">{tab.label}</span>
          </button>
        ))}
      </div>

      {/* Tab Content */}
      <div className="min-h-[300px]">
        {/* Tab 3: Danh s√°ch nh·ªØng l·∫ßn c√≥ s·ª± xu·∫•t hi·ªán c·ªßa nh√¢n v·∫≠t */}
        {activeTab === 3 && (
          <div className="bg-white p-8 rounded-lg border-2 border-primary-200">
            <div className="mb-6">
              <h3 className="text-xl font-bold text-[#4ade80]-600 mb-2 flex items-center gap-2">
                <span>üé≠</span>
                <span>Danh s√°ch xu·∫•t hi·ªán c·ªßa nh√¢n v·∫≠t</span>
              </h3>
              <p className="text-gray-600">
                T√¨m ki·∫øm t·∫•t c·∫£ c√°c l·∫ßn xu·∫•t hi·ªán c·ªßa nh√¢n v·∫≠t trong tr√≠ch d·∫´n
              </p>
            </div>

            <div className="space-y-4 mb-8">
              <div className="flex flex-wrap items-center gap-3 text-lg">
                <span className="text-gray-700">
                  Xem xu·∫•t hi·ªán c·ªßa nh√¢n v·∫≠t
                </span>
                <select
                  value={filters.characterName || ""}
                  onChange={(e) =>
                    handleFilterChange("characterName", e.target.value)
                  }
                  className="px-4 py-3 border-2 border-primary-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-primary-400 bg-white min-w-[200px] text-base"
                >
                  {characterOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
                <span className="text-gray-700">trong v·ªü ch√®o</span>
                <select
                  value={filters.performance || ""}
                  onChange={(e) =>
                    handleFilterChange("performance", e.target.value)
                  }
                  className="px-4 py-3 border-2 border-primary-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-primary-400 bg-white min-w-[220px] text-base"
                >
                  {playOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="flex justify-center">
              <button
                onClick={() => handleSearch(3)}
                className="px-8 py-3 bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-lg hover:from-primary-600 hover:to-primary-700 focus:outline-none focus:ring-4 focus:ring-primary-300 transition-all duration-300 font-medium text-lg flex items-center gap-2 shadow-lg hover:shadow-xl"
              >
                <span>üé≠</span>
                <span>T√¨m xu·∫•t hi·ªán</span>
              </button>
            </div>
          </div>
        )}

        {/* Tab 4: Danh s√°ch nh·ªØng l·∫ßn nh√¢n v·∫≠t c√≥ n√©t di·ªÖn */}
        {activeTab === 4 && (
          <div className="bg-white p-8 rounded-lg border-2 border-primary-200">
            <div className="mb-6">
              <h3 className="text-xl font-bold text-primary-600 mb-2 flex items-center gap-2">
                <span>üòä</span>
                <span>Danh s√°ch n√©t di·ªÖn c·ªßa nh√¢n v·∫≠t</span>
              </h3>
              <p className="text-gray-600">
                T√¨m ki·∫øm c√°c c·∫£nh di·ªÖn c√≥ bi·ªÉu c·∫£m c·ª• th·ªÉ c·ªßa nh√¢n v·∫≠t
              </p>
            </div>

            <div className="space-y-4 mb-8">
              <div className="flex flex-wrap items-center gap-3 text-lg">
                <span className="text-gray-700">Xem n√©t di·ªÖn c·ªßa</span>
                <select
                  value={filters.characterName || ""}
                  onChange={(e) =>
                    handleFilterChange("characterName", e.target.value)
                  }
                  className="px-4 py-3 border-2 border-primary-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-primary-400 bg-white min-w-[200px] text-base"
                >
                  {characterOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
                <span className="text-gray-700">v·ªõi bi·ªÉu c·∫£m</span>
                <select className="px-4 py-3 border-2 border-primary-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-primary-400 bg-white min-w-[160px] text-base">
                  {actorOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="flex justify-center">
              <button
                onClick={() => handleSearch(4)}
                className="px-8 py-3 bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-lg hover:from-primary-600 hover:to-primary-700 focus:outline-none focus:ring-4 focus:ring-primary-300 transition-all duration-300 font-medium text-lg flex items-center gap-2 shadow-lg hover:shadow-xl"
              >
                <span>üòä</span>
                <span>T√¨m n√©t di·ªÖn</span>
              </button>
            </div>
          </div>
        )}

        {/* Tab 5: Xem m√¥ t·∫£ */}
        {activeTab === 5 && (
          <div className="bg-white p-8 rounded-lg border-2 border-primary-200">
            <div className="mb-6">
              <h3 className="text-xl font-bold text-primary-600 mb-2 flex items-center gap-2">
                <span>üìñ</span>
                <span>Xem m√¥ t·∫£ chi ti·∫øt</span>
              </h3>
              <p className="text-gray-600">
                Xem m√¥ t·∫£ chi ti·∫øt v·ªÅ c√°c danh m·ª•c trong ngh·ªá thu·∫≠t Ch√®o
              </p>
            </div>

            <div className="space-y-4 mb-8">
              <div className="flex flex-wrap items-center gap-3 text-lg">
                <span className="text-gray-700">Xem m√¥ t·∫£ v·ªÅ</span>
                <select className="px-4 py-3 border-2 border-primary-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-primary-400 bg-white min-w-[180px] text-base">
                  {categoryOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="flex justify-center">
              <button
                onClick={() => handleSearch(5)}
                className="px-8 py-3 bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-lg hover:from-primary-600 hover:to-primary-700 focus:outline-none focus:ring-4 focus:ring-primary-300 transition-all duration-300 font-medium text-lg flex items-center gap-2 shadow-lg hover:shadow-xl"
              >
                <span>üìñ</span>
                <span>Xem m√¥ t·∫£</span>
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SearchForm;
